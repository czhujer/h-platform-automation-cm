#cloud-config
---
write_files:
  - path: "/opt/bin/touch"
    permissions: '0644'
    owner: core:core
  - path: /opt/docker/compose/owncloudstack/.env
    permissions: '0644'
    owner: core:core
    content: |
      OWNCLOUD_DOMAIN=localhost
      ADMIN_USERNAME=admin
      ADMIN_PASSWORD=admin
  - path: /opt/docker/compose/owncloudstack/docker-compose.yaml
    permissions: 0644
    content: |
      version: '3'

      volumes:
        web_data:
          driver: local
        db_data:
          driver: local
        backup:
          driver: local
        redis:
          driver: local

      services:
        db:
          image: webhippie/mariadb:latest
          restart: unless-stopped
          env_file: .env
          environment:
            - MARIADB_ROOT_PASSWORD=root_password
            - MARIADB_USERNAME=owncloud
            - MARIADB_PASSWORD=owncloud
            - MARIADB_DATABASE=owncloud
            - MARIADB_MAX_ALLOWED_PACKET=128M
            - MARIADB_INNODB_LOG_FILE_SIZE=64M
          healthcheck:
            test: ["CMD", "/usr/bin/healthcheck"]
            interval: 30s
            timeout: 10s
            retries: 5
          volumes:
            - db_data:/var/lib/mysql
          networks:
            - app-network
        db-exporter:
          depends_on:
            - db
          image: prom/mysqld-exporter:latest
          restart: always
          env_file: .env
          networks:
            - app-network
          ports:
            - "9104:9104"
          environment:
            - DATA_SOURCE_NAME="user:password@(db:3306)/"
        redis:
          image: webhippie/redis:latest
          restart: always
          environment:
            - REDIS_DATABASES=1
          healthcheck:
            test: ["CMD", "/usr/bin/healthcheck"]
            interval: 30s
            timeout: 10s
            retries: 5
          volumes:
            - redis:/var/lib/redis
          networks:
            - app-network
        redis-exporter:
          depends_on:
            - redis
          image: oliver006/redis_exporter:alpine
          restart: always
          networks:
            - app-network
          ports:
            - "9121:9121"
          environment:
            - REDIS_ADDR=redis:6379

        owncloud:
          depends_on:
            - db
            - redis
          image: owncloud/server:10.3
          restart: unless-stopped
          env_file: .env
          environment:
            - OWNCLOUD_DOMAIN=${OWNCLOUD_DOMAIN}
            - OWNCLOUD_DB_TYPE=mysql
            - OWNCLOUD_DB_NAME=owncloud
            - OWNCLOUD_DB_USERNAME=owncloud
            - OWNCLOUD_DB_PASSWORD=owncloud
            - OWNCLOUD_DB_HOST=db
            - OWNCLOUD_ADMIN_USERNAME=${ADMIN_USERNAME}
            - OWNCLOUD_ADMIN_PASSWORD=${ADMIN_PASSWORD}
            - OWNCLOUD_MYSQL_UTF8MB4=true
            - OWNCLOUD_REDIS_ENABLED=true
            - OWNCLOUD_REDIS_HOST=redis
          healthcheck:
            test: ["CMD", "/usr/bin/healthcheck"]
            interval: 30s
            timeout: 10s
            retries: 5
          volumes:
            - web_data:/mnt/data
          networks:
            - app-network

        webserver:
          depends_on:
            - owncloud
          image: nginx:1.17-alpine
          restart: unless-stopped
          healthcheck:
            test: ["CMD", "wget", "-q", "http://127.0.0.1/nginx_status", "-O", "-"]
            interval: 30s
            timeout: 10s
            retries: 5
          ports:
            - "80:80"
          volumes:
            #- web_data:/var/www/html
            - ./nginx-conf:/etc/nginx/conf.d
          networks:
            - app-network
        webserver-exporter:
          depends_on:
            - webserver
          image: nginx/nginx-prometheus-exporter:0.4.2
          restart: always
          networks:
            - app-network
          ports:
            - "9113:9113"
          command:
            - "-nginx.scrape-uri"
            - "http://webserver:8080/stub_status"

      networks:
        app-network:
          driver: bridge
  - path: /opt/docker/compose/promexporters/docker-compose.yaml
    permissions: 0644
    content: |
      version: '3'

      services:

        nodeexporter:
          image: prom/node-exporter:v0.18.1
          container_name: nodeexporter
          volumes:
            - /proc:/host/proc:ro
            - /sys:/host/sys:ro
            - /:/rootfs:ro
          command:
            - '--path.procfs=/host/proc'
            - '--path.rootfs=/rootfs'
            - '--path.sysfs=/host/sys'
            - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
          restart: unless-stopped
          network_mode: host
          labels:
            org.label-schema.group: "monitoring"

        cadvisor:
          image: google/cadvisor:v0.33.0
          container_name: cadvisor
          volumes:
            - /:/rootfs:ro
            - /var/run:/var/run:rw
            - /sys:/sys:ro
            - /var/lib/docker/:/var/lib/docker:ro
            - /cgroup:/cgroup:ro
          restart: unless-stopped
          network_mode: host
          labels:
            org.label-schema.group: "monitoring"
  - path: /opt/docker/compose/owncloudstack/nginx-conf/nginx.conf
    permissions: 0644
    content: |
      upstream owncloud_server {
              server owncloud:8080 max_fails=3 fail_timeout=30s;
      }

      server {
              listen 80;
              listen [::]:80;

              #server_name example.com www.example.com;

              #location ~ /.well-known/acme-challenge {
              #        allow all;
              #        root /var/www/html;
              #}

              #location / {
              #        rewrite ^ https://$host$request_uri? permanent;
              #}
      #}

      #server {
      #        listen 443 ssl http2;
      #        listen [::]:443 ssl http2;
      #        server_name example.com www.example.com;

              index index.php index.html index.htm;

              root /var/www/html;

              server_tokens off;

              #ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;
              #ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;

              #include /etc/nginx/conf.d/options-ssl-nginx.conf;

              add_header X-Frame-Options "SAMEORIGIN" always;
              add_header X-XSS-Protection "1; mode=block" always;
              add_header X-Content-Type-Options "nosniff" always;
              add_header Referrer-Policy "no-referrer-when-downgrade" always;
              add_header Content-Security-Policy "default-src * data: 'unsafe-eval' 'unsafe-inline'" always;
              # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
              # enable strict transport security only if you understand the implications

              location / {
                      #proxy_set_header Host $host;
                      #proxy_set_header X-Real-IP $remote_addr;
                      #proxy_set_header Accept-Encoding "";
                      proxy_pass http://owncloud_server;
              }

              location ~ /\.ht {
                      deny all;
              }

              location = /favicon.ico {
                      log_not_found off; access_log off;
              }
              location = /robots.txt {
                      log_not_found off; access_log off; allow all;
              }
              #location ~* \.(css|gif|ico|jpeg|jpg|js|png)$ {
              #        expires max;
              #        log_not_found off;
              #}
      }
      server {
          listen 8080;
          listen [::]:8080;
          location /stub_status {
              stub_status;

              access_log off;
              allow 127.0.0.1;
              allow 172.16.0.0/12;
              deny all;
          }
      }

coreos:
  update:
    reboot-strategy: off
  units:
    - name: docker-compose-owncloudstack.service
      runtime: true
      command: start
      content: |
        [Unit]
        Description=owncloudstack service with docker compose
        Requires=docker.service
        After=docker.service

        [Service]
        Restart=always

        WorkingDirectory=/opt/docker/compose/owncloudstack

        # download docker-compose
        ExecStartPre=-/bin/bash -c 'if [ ! -s /opt/bin/docker-compose ]; then sudo curl -s -L "https://github.com/docker/compose/releases/download/1.24.1/docker-compose-Linux-x86_64" > /opt/bin/docker-compose; fi;'
        ExecStartPre=-/bin/bash -c 'if [ ! -x /opt/bin/docker-compose ]; then chmod 755 /opt/bin/docker-compose; fi;'

        # Remove old containers, images and volumes
        ExecStartPre=/opt/bin/docker-compose down -v
        ExecStartPre=/opt/bin/docker-compose rm -fv
        ExecStartPre=-/bin/bash -c 'docker volume ls -qf "name=%i_" | xargs docker volume rm'
        ExecStartPre=-/bin/bash -c 'docker network ls -qf "name=%i_" | xargs docker network rm'
        ExecStartPre=-/bin/bash -c 'docker ps -aqf "name=%i_*" | xargs docker rm'

        # Compose up
        ExecStart=/opt/bin/docker-compose up

        # Compose down, remove containers and volumes
        ExecStop=/opt/bin/docker-compose down -v

        [Install]
        WantedBy=multi-user.target
    - name: docker-compose-promexporters.service
      runtime: true
      command: start
      content: |
        [Unit]
        Description=docker-compose service for prometheus exporters
        Requires=docker.service
        After=docker.service

        [Service]
        Restart=always

        WorkingDirectory=/opt/docker/compose/promexporters

        # download docker-compose
        ExecStartPre=-/bin/bash -c 'if [ ! -s /opt/bin/docker-compose ]; then sudo curl -s -L "https://github.com/docker/compose/releases/download/1.24.1/docker-compose-Linux-x86_64" > /opt/bin/docker-compose; fi;'
        ExecStartPre=-/bin/bash -c 'if [ ! -x /opt/bin/docker-compose ]; then chmod 755 /opt/bin/docker-compose; fi;'

        # Remove old containers, images and volumes
        ExecStartPre=/opt/bin/docker-compose down -v
        ExecStartPre=/opt/bin/docker-compose rm -fv
        ExecStartPre=-/bin/bash -c 'docker volume ls -qf "name=%i_" | xargs docker volume rm'
        ExecStartPre=-/bin/bash -c 'docker network ls -qf "name=%i_" | xargs docker network rm'
        ExecStartPre=-/bin/bash -c 'docker ps -aqf "name=%i_*" | xargs docker rm'

        # Compose up
        ExecStart=/opt/bin/docker-compose up

        # Compose down, remove containers and volumes
        ExecStop=/opt/bin/docker-compose down -v

        [Install]
        WantedBy=multi-user.target
